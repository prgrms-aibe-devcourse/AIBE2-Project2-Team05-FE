# Task ID: 2
# Title: Implement Authentication System
# Status: pending
# Dependencies: 1
# Priority: high
# Description: 사용자 인증을 위한 인증 컨텍스트, 로그인/회원가입 양식 및 기본 상태 관리를 구현합니다.
# Details:
프론트엔드에서 로그인/회원가입 UI를 구현합니다. React Context API를 사용하여 기본적인 인증 상태를 관리합니다. 전역적으로 인증 상태를 관리하기 위한 AuthContext.tsx를 생성합니다. 백엔드에서 제공하는 JWT 토큰을 받아 저장하는 기본 기능을 구현합니다. Formik v2.4+ 및 스키마 유효성 검사를 위한 Yup v1.2+를 사용하여 이메일/비밀번호 필드와 유효성 검사가 있는 로그인 폼을 생성합니다. 필요한 사용자 필드가 있는 회원가입 폼을 구현합니다. React Router의 라우트 가드를 사용하여 보호된 라우트를 구현합니다. 인증 상태 및 API 호출 관리를 위해 React Query v4+를 사용합니다. 실제 JWT 토큰 처리, 갱신 등 핵심 로직은 백엔드에서 담당하므로 프론트엔드에서는 폼 제출 및 기본적인 상태 관리만 처리합니다.

# Test Strategy:
유효하고 유효하지 않은 자격 증명으로 로그인 및 회원가입 폼 제출을 테스트합니다. 백엔드로부터 받은 토큰이 올바르게 저장되는지 확인합니다. 인증이 있는 경우와 없는 경우의 보호된 라우트를 테스트합니다. 모든 필드에 대한 폼 유효성 검사를 테스트합니다. 인증 상태가 UI에 올바르게 반영되는지 확인합니다.

# Subtasks:
## 1. AuthContext 구현 [done]
### Dependencies: None
### Description: 사용자 인증 상태를 전역적으로 관리하기 위한 기본적인 AuthContext.tsx 생성
### Details:
사용자 로그인 상태와 기본적인 인증 정보를 관리하는 컨텍스트를 구현합니다. 백엔드에서 제공하는 인증 응답을 처리하는 기능을 포함합니다.

## 2. 토큰 저장 구현 [done]
### Dependencies: None
### Description: 백엔드에서 제공하는 JWT 토큰을 저장하는 기본 기능 구현
### Details:
localStorage를 사용하여 백엔드에서 받은 토큰을 저장하고 필요할 때 검색하는 기능을 구현합니다. 기본적인 보안 조치를 적용합니다.

## 3. 로그인 폼 구현 [done]
### Dependencies: None
### Description: Formik과 Yup을 사용한 이메일/비밀번호 필드 및 유효성 검사가 있는 로그인 폼 생성
### Details:
이메일과 비밀번호 입력 필드, 유효성 검사, 오류 메시지 표시 기능이 있는 로그인 폼을 구현합니다. 폼 제출 시 백엔드 API와 통신합니다.

## 4. 회원가입 폼 구현 [done]
### Dependencies: None
### Description: 필요한 사용자 필드가 있는 회원가입 폼 구현
### Details:
이름, 이메일, 비밀번호 등 필요한 사용자 정보 필드와 유효성 검사가 있는 회원가입 폼을 구현합니다. 폼 제출 시 백엔드 API와 통신합니다.

## 5. 인증 상태 UI 반영 [deferred]
### Dependencies: None
### Description: 사용자 인증 상태에 따라 UI 요소를 조건부로 표시
### Details:
로그인 상태에 따라 네비게이션 메뉴, 사용자 프로필 정보 등의 UI 요소를 조건부로 표시하는 기능을 구현합니다.

## 6. 보호된 라우트 구현 [pending]
### Dependencies: None
### Description: React Router의 라우트 가드를 사용하여 인증이 필요한 페이지 보호
### Details:
인증되지 않은 사용자가 접근할 수 없는 보호된 라우트를 구현합니다. 인증되지 않은 사용자는 로그인 페이지로 리디렉션됩니다.

## 7. React Query 통합 [deferred]
### Dependencies: None
### Description: 인증 상태 및 API 호출 관리를 위한 React Query 설정
### Details:
로그인, 회원가입 등의 인증 관련 API 호출을 React Query를 사용하여 구현합니다. 로딩 상태, 오류 처리 등을 관리합니다.

